// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String? @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  followedBy         User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs      String[] @db.ObjectId
  following          User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs       String[] @db.ObjectId
  
  accounts      Account[]
  workouts      Workout[]
  exercises     Exercise[]
  templates     Template[]
}
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Workout {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())
  date      DateTime
  time      String
  title     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises Exercise[]
}

model Exercise {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  workoutId  String?  @db.ObjectId
  templateId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  name       String
  Weight     Int
  sets       Int
  Reps       Int
  Rest       Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  template Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Template {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())
  name     String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises Exercise[]
}